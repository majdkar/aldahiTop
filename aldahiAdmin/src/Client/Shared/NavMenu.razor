@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using FirstCall.Client.Helpers
@using FirstCall.Shared.Constants.Application
@using FirstCall.Shared.ViewModels.Blocks
@using FirstCall.Shared.ViewModels.Menus
@using FirstCall.Shared.Wrapper

@code {
    [CascadingParameter] private HubConnection HubConnection { get; set; }
}

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" IconColor="Color.Info" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">@_localizer["Home"]</MudNavLink>

   


    <MudNavLink Href="/account" IconColor="Color.Info" Icon="@Icons.Material.Outlined.AccountBox">
        @_localizer["Account"]
    </MudNavLink>
 
    @*users management*@
    @if (_isAdmin)
    {
        <MudNavGroup Title="@_localizer["Administrator"]" IconColor="Color.Info" Icon="@Icons.Material.Outlined.AdminPanelSettings">
            @if (_canViewUsers)
            {
                <MudNavLink Href="/identity/users" IconColor="Color.Info" Icon="@Icons.Material.Outlined.Person">
                    @_localizer["Users"]
                </MudNavLink>
            }
            @if (_canViewRoles)
            {
                <MudNavLink Href="/identity/roles" IconColor="Color.Info" Icon="@Icons.Material.Outlined.Person">@_localizer["Roles"]</MudNavLink>
            }
        </MudNavGroup>
    }




    @*general settings*@
    @if (_canViewSeasons || _canViewKinds)
    {
        <MudNavGroup Title="@_localizer["GeneralSettings Management"]" IconColor="Color.Info" Icon="@Icons.Material.Outlined.Settings">


            @if (_canViewSeasons)
            {
                <MudNavLink Href="/general-settings/Seasons" IconColor="Color.Info" Icon="@Icons.Material.Outlined.CallToAction">
                    @_localizer["Seasons"]
                </MudNavLink>
            }
            @if (_canViewKinds)
            {
                <MudNavLink Href="/general-settings/Kinds" IconColor="Color.Info" Icon="@Icons.Material.Outlined.CallToAction">
                    @_localizer["Products Kinds"]
                </MudNavLink>
            }    
            
            @if (_canViewGroups)
            {
                <MudNavLink Href="/general-settings/Groups" IconColor="Color.Info" Icon="@Icons.Material.Outlined.CallToAction">
                    @_localizer["Groups"]
                </MudNavLink>
            }    

            @if (_canViewWarehousess)
            {
                <MudNavLink Href="/general-settings/Warehousess" IconColor="Color.Info" Icon="@Icons.Material.Outlined.CallToAction">
                    @_localizer["Warehousess"]
                </MudNavLink>
            }

            <MudNavLink Href="/general-settings/Product-Categories" IconColor="Color.Info" Icon="@Icons.Material.Outlined.CallToAction">
                @_localizer["Product Categories"]
            </MudNavLink>


        </MudNavGroup>
    }

    @if (_canViewPersons)
    {

        <MudNavGroup Title="@_localizer["Clients Management"]" IconColor="Color.Info" Icon="@Icons.Material.Outlined.Person">
            @if (_canViewPersons)
            {
                <MudNavLink Href="/individuals">
                    @_localizer["Individuals"]
                </MudNavLink>
            }
        </MudNavGroup>

    }

    @if (_canViewProducts)
    {
        <MudNavGroup Title="@_localizer["Products"]" IconColor="Color.Info" Icon="@Icons.Material.Outlined.CardMembership">


            <MudNavLink Href="/products/B2B" >
            @_localizer["B2B Products"]
    </MudNavLink>
      
            <MudNavLink Href="/products/B2C" >
                @_localizer["B2C Products"]
    </MudNavLink>

        </MudNavGroup>

    
    }

    @if (_canViewOrder)
    {
        <MudNavGroup Title="@_localizer["Orders Management"]" IconColor="Color.Info" Icon="@Icons.Material.Outlined.ShoppingCart">

            <MudNavLink Href="/HomeDeliveryOrders">
            @_localizer["B2B Orders"]
        </MudNavLink>

            <MudNavLink Href="/HomeB2CDeliveryOrders">
            @_localizer["B2C Orders"]
        </MudNavLink>

        </MudNavGroup>

    }

    @if (_canViewStocks)
    {
     @*    <MudNavLink Href="/general-settings/Stocks" >
            @_localizer["Stocks"]
        </MudNavLink> *@
    }

</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire;
    private bool _canViewDashboards;
    private bool _canViewDocuments;
    private bool _canViewDocumentTypes;
    private bool _canViewAuditTrails;
    private bool _canViewRoles;
    private bool _canViewUsers;
    private bool _canViewChat;
    private bool _canViewProducts;
    private bool _canViewBrands;
    private bool _canViewcarCategories;

    private bool _canViewServices;
    private bool _canViewWebSiteManagement;

    @*/*s0012s*/*@
    private bool _canViewSexs; 
    private bool _canViewRequestStatuss;
    private bool _canViewPassports;
    private bool _canViewOwners;
    private bool _canViewPrincedoms;
    private bool _canViewNations;
    private bool _canViewCountries;
    //management
    private bool _canViewBlocks;
    private bool _canViewEvents;
    private bool _canViewMenues;
    private bool _canViewPages;
    private bool _canViewBlockCategories;
    private bool _canViewEventCategories;
    private bool _canViewMenuCategories;
    private bool _canCreateBlocks;
    private bool _canCreateMenues;
    private bool _canCreatePages;
    private bool _canCreateBlockCategories;
    private bool _canCreateMenuCategories;
    private bool _canEditBlocks;
    private bool _canEditMenues;
    private bool _canEditPages;
    private bool _canEditBlockCategories;
    private bool _canEditMenuCategories;
    private bool _canViewIndividuals;
    private bool _canViewCompanies;
    private bool _canViewSuggestion;
    private bool _canViewBonusPoints;
    private bool _canViewCoupon;
    private bool _canViewInstantPricing;
    private bool _canViewCars;
    private bool _canViewSeasons;
    private bool _canViewPersons;
    private bool _canViewKinds;
    private bool _canViewGroups;
    private bool _canViewStocks;
    private bool _canViewWarehousess;
    private bool _canViewOrder;
    private bool _isAdmin;
    
    private ClaimsPrincipal _currentUser;

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();

        _currentUser = await _authenticationManager.CurrentUser();
        _isAdmin = _currentUser.IsInRole("Administrator");
        _canViewOrder = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DeliveryOrders.View)).Succeeded;

        _canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        _canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        _canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        _canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        _canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        _canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
        @*/*s0013s*/*@
        _canViewSeasons = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Seasons.View)).Succeeded;
        _canViewPersons = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Persons.View)).Succeeded;
        _canViewKinds = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Kinds.View)).Succeeded;
        _canViewGroups = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Groups.View)).Succeeded;
        _canViewStocks = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Stocks.View)).Succeeded;
        _canViewWarehousess = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Warehouses.View)).Succeeded;
        //_canViewSexs = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Sexs.View)).Succeeded;
        _canViewPrincedoms = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Princedoms.View)).Succeeded;
        _canViewNations = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Nations.View)).Succeeded;
        _canViewWebSiteManagement = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.WebSiteManagement.View)).Succeeded;
        _canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;

        _canViewBlocks = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Blocks.View)).Succeeded;
        _canCreateBlocks = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Blocks.Create)).Succeeded;
        _canEditBlocks = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Blocks.Edit)).Succeeded;

        _canViewEvents = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Events.View)).Succeeded;

        _canViewMenues = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Menues.View)).Succeeded;
        _canCreateMenues = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Menues.Create)).Succeeded;
        _canEditMenues = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Menues.Edit)).Succeeded;

        _canViewPages = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Pages.View)).Succeeded;
        _canCreatePages = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Pages.Create)).Succeeded;
        _canEditPages = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Pages.Edit)).Succeeded;

        _canViewBlockCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.BlockCategories.View)).Succeeded;
        _canCreateBlockCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.BlockCategories.Create)).Succeeded;
        _canEditBlockCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.BlockCategories.Edit)).Succeeded;

        _canViewEventCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.EventCategories.View)).Succeeded;

        _canViewMenuCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.MenuCategories.View)).Succeeded;
        _canCreateMenuCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.MenuCategories.Create)).Succeeded;
        _canEditMenuCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.MenuCategories.Edit)).Succeeded;

        _canViewCountries = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Countries.View)).Succeeded;

        _canViewIndividuals = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Persons.View)).Succeeded;

    }
    [Inject] AuthenticationStateProvider? StateProvider { get; set; }

    private IEnumerable<MenuCategoryViewModel> categories;
    private IEnumerable<BlockCategoryViewModel> blocks;
   

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await LoadMenuCategories();
            await LoadBlockCategories();
            await base.OnInitializedAsync();


        }
        catch
        {
            _snackBar.Add("Error Loading Categories!");
        }

        HubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri(ApplicationConstants.SignalR.HubUrl))
            .Build();
        HubConnection.On(ApplicationConstants.SignalR.ReceiveUpdateDashboard, async () =>
        {
            _snackBar.Add("Menu Changed");
            try
            {
                await LoadMenuCategories();
                await LoadBlockCategories();
            }
            catch
            {
                _snackBar.Add("Error Loading Categories!");
            }
            StateHasChanged();
        });
        await HubConnection.StartAsync();



    }

  
    private async Task LoadMenuCategories()
    {
        var response = await _httpClient.GetFromJsonAsync<IEnumerable<MenuCategoryViewModel>>(EndPoints.MenuCategoriesSelect);
        if (response != null)
        {
           categories = response;
        }
        else
        {
            _snackBar.Add("Error retrieving data");
        }
    }


     private async Task LoadBlockCategories()
    {
        var response = await _httpClient.GetFromJsonAsync<IEnumerable<BlockCategoryViewModel>>(EndPoints.BlockCategoriesSelect);
        if (response != null)
        {
            blocks = response;
        }
        else
        {
            _snackBar.Add("Error retrieving data");
        }
    }
}